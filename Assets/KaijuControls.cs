//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/KaijuControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KaijuControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KaijuControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KaijuControls"",
    ""maps"": [
        {
            ""name"": ""KaijuAction"",
            ""id"": ""2ef050be-5d3f-4fb1-b778-940578e3f8ec"",
            ""actions"": [
                {
                    ""name"": ""Walk Left"",
                    ""type"": ""Button"",
                    ""id"": ""5c4849d3-4a7c-46ee-93a1-0c8012a265be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk Right"",
                    ""type"": ""Button"",
                    ""id"": ""21270bd4-10f9-4954-9aee-8af91fe473f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82375dac-9479-44b3-8f05-93180372ea49"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee62bc9e-430d-4bf4-a0ba-e29ea1fc764b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Kaiju"",
            ""bindingGroup"": ""Kaiju"",
            ""devices"": []
        }
    ]
}");
        // KaijuAction
        m_KaijuAction = asset.FindActionMap("KaijuAction", throwIfNotFound: true);
        m_KaijuAction_WalkLeft = m_KaijuAction.FindAction("Walk Left", throwIfNotFound: true);
        m_KaijuAction_WalkRight = m_KaijuAction.FindAction("Walk Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KaijuAction
    private readonly InputActionMap m_KaijuAction;
    private List<IKaijuActionActions> m_KaijuActionActionsCallbackInterfaces = new List<IKaijuActionActions>();
    private readonly InputAction m_KaijuAction_WalkLeft;
    private readonly InputAction m_KaijuAction_WalkRight;
    public struct KaijuActionActions
    {
        private @KaijuControls m_Wrapper;
        public KaijuActionActions(@KaijuControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @WalkLeft => m_Wrapper.m_KaijuAction_WalkLeft;
        public InputAction @WalkRight => m_Wrapper.m_KaijuAction_WalkRight;
        public InputActionMap Get() { return m_Wrapper.m_KaijuAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KaijuActionActions set) { return set.Get(); }
        public void AddCallbacks(IKaijuActionActions instance)
        {
            if (instance == null || m_Wrapper.m_KaijuActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KaijuActionActionsCallbackInterfaces.Add(instance);
            @WalkLeft.started += instance.OnWalkLeft;
            @WalkLeft.performed += instance.OnWalkLeft;
            @WalkLeft.canceled += instance.OnWalkLeft;
            @WalkRight.started += instance.OnWalkRight;
            @WalkRight.performed += instance.OnWalkRight;
            @WalkRight.canceled += instance.OnWalkRight;
        }

        private void UnregisterCallbacks(IKaijuActionActions instance)
        {
            @WalkLeft.started -= instance.OnWalkLeft;
            @WalkLeft.performed -= instance.OnWalkLeft;
            @WalkLeft.canceled -= instance.OnWalkLeft;
            @WalkRight.started -= instance.OnWalkRight;
            @WalkRight.performed -= instance.OnWalkRight;
            @WalkRight.canceled -= instance.OnWalkRight;
        }

        public void RemoveCallbacks(IKaijuActionActions instance)
        {
            if (m_Wrapper.m_KaijuActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKaijuActionActions instance)
        {
            foreach (var item in m_Wrapper.m_KaijuActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KaijuActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KaijuActionActions @KaijuAction => new KaijuActionActions(this);
    private int m_KaijuSchemeIndex = -1;
    public InputControlScheme KaijuScheme
    {
        get
        {
            if (m_KaijuSchemeIndex == -1) m_KaijuSchemeIndex = asset.FindControlSchemeIndex("Kaiju");
            return asset.controlSchemes[m_KaijuSchemeIndex];
        }
    }
    public interface IKaijuActionActions
    {
        void OnWalkLeft(InputAction.CallbackContext context);
        void OnWalkRight(InputAction.CallbackContext context);
    }
}
